/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SyncLog, Calendar } from "@prisma/client";

export class SyncLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SyncLogCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogCountArgs>
  ): Promise<number> {
    return this.prisma.syncLog.count(args);
  }

  async syncLogs<T extends Prisma.SyncLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogFindManyArgs>
  ): Promise<SyncLog[]> {
    return this.prisma.syncLog.findMany(args);
  }
  async syncLog<T extends Prisma.SyncLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogFindUniqueArgs>
  ): Promise<SyncLog | null> {
    return this.prisma.syncLog.findUnique(args);
  }
  async createSyncLog<T extends Prisma.SyncLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogCreateArgs>
  ): Promise<SyncLog> {
    return this.prisma.syncLog.create<T>(args);
  }
  async updateSyncLog<T extends Prisma.SyncLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogUpdateArgs>
  ): Promise<SyncLog> {
    return this.prisma.syncLog.update<T>(args);
  }
  async deleteSyncLog<T extends Prisma.SyncLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncLogDeleteArgs>
  ): Promise<SyncLog> {
    return this.prisma.syncLog.delete(args);
  }

  async getCalendar(parentId: string): Promise<Calendar | null> {
    return this.prisma.syncLog
      .findUnique({
        where: { id: parentId },
      })
      .calendar();
  }
}
