/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Calendar,
  SyncLog,
  SyncToken,
  Account,
  Provider,
  Schedule,
} from "@prisma/client";

export class CalendarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CalendarCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCountArgs>
  ): Promise<number> {
    return this.prisma.calendar.count(args);
  }

  async calendars<T extends Prisma.CalendarFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarFindManyArgs>
  ): Promise<Calendar[]> {
    return this.prisma.calendar.findMany(args);
  }
  async calendar<T extends Prisma.CalendarFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarFindUniqueArgs>
  ): Promise<Calendar | null> {
    return this.prisma.calendar.findUnique(args);
  }
  async createCalendar<T extends Prisma.CalendarCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCreateArgs>
  ): Promise<Calendar> {
    return this.prisma.calendar.create<T>(args);
  }
  async updateCalendar<T extends Prisma.CalendarUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarUpdateArgs>
  ): Promise<Calendar> {
    return this.prisma.calendar.update<T>(args);
  }
  async deleteCalendar<T extends Prisma.CalendarDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarDeleteArgs>
  ): Promise<Calendar> {
    return this.prisma.calendar.delete(args);
  }

  async findSyncLogs(
    parentId: string,
    args: Prisma.SyncLogFindManyArgs
  ): Promise<SyncLog[]> {
    return this.prisma.calendar
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .syncLogs(args);
  }

  async findSyncTokens(
    parentId: string,
    args: Prisma.SyncTokenFindManyArgs
  ): Promise<SyncToken[]> {
    return this.prisma.calendar
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .syncTokens(args);
  }

  async getAccount(parentId: string): Promise<Account | null> {
    return this.prisma.calendar
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }

  async getProvider(parentId: string): Promise<Provider | null> {
    return this.prisma.calendar
      .findUnique({
        where: { id: parentId },
      })
      .provider();
  }

  async getSchedule(parentId: string): Promise<Schedule | null> {
    return this.prisma.calendar
      .findUnique({
        where: { id: parentId },
      })
      .schedule();
  }
}
