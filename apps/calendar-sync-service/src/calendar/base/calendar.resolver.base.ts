/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Calendar } from "./Calendar";
import { CalendarCountArgs } from "./CalendarCountArgs";
import { CalendarFindManyArgs } from "./CalendarFindManyArgs";
import { CalendarFindUniqueArgs } from "./CalendarFindUniqueArgs";
import { CreateCalendarArgs } from "./CreateCalendarArgs";
import { UpdateCalendarArgs } from "./UpdateCalendarArgs";
import { DeleteCalendarArgs } from "./DeleteCalendarArgs";
import { SyncLogFindManyArgs } from "../../syncLog/base/SyncLogFindManyArgs";
import { SyncLog } from "../../syncLog/base/SyncLog";
import { SyncTokenFindManyArgs } from "../../syncToken/base/SyncTokenFindManyArgs";
import { SyncToken } from "../../syncToken/base/SyncToken";
import { Account } from "../../account/base/Account";
import { Provider } from "../../provider/base/Provider";
import { Schedule } from "../../schedule/base/Schedule";
import { CalendarService } from "../calendar.service";
@graphql.Resolver(() => Calendar)
export class CalendarResolverBase {
  constructor(protected readonly service: CalendarService) {}

  async _calendarsMeta(
    @graphql.Args() args: CalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Calendar])
  async calendars(
    @graphql.Args() args: CalendarFindManyArgs
  ): Promise<Calendar[]> {
    return this.service.calendars(args);
  }

  @graphql.Query(() => Calendar, { nullable: true })
  async calendar(
    @graphql.Args() args: CalendarFindUniqueArgs
  ): Promise<Calendar | null> {
    const result = await this.service.calendar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Calendar)
  async createCalendar(
    @graphql.Args() args: CreateCalendarArgs
  ): Promise<Calendar> {
    return await this.service.createCalendar({
      ...args,
      data: {
        ...args.data,

        account: args.data.account
          ? {
              connect: args.data.account,
            }
          : undefined,

        provider: args.data.provider
          ? {
              connect: args.data.provider,
            }
          : undefined,

        schedule: args.data.schedule
          ? {
              connect: args.data.schedule,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Calendar)
  async updateCalendar(
    @graphql.Args() args: UpdateCalendarArgs
  ): Promise<Calendar | null> {
    try {
      return await this.service.updateCalendar({
        ...args,
        data: {
          ...args.data,

          account: args.data.account
            ? {
                connect: args.data.account,
              }
            : undefined,

          provider: args.data.provider
            ? {
                connect: args.data.provider,
              }
            : undefined,

          schedule: args.data.schedule
            ? {
                connect: args.data.schedule,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Calendar)
  async deleteCalendar(
    @graphql.Args() args: DeleteCalendarArgs
  ): Promise<Calendar | null> {
    try {
      return await this.service.deleteCalendar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SyncLog], { name: "syncLogs" })
  async findSyncLogs(
    @graphql.Parent() parent: Calendar,
    @graphql.Args() args: SyncLogFindManyArgs
  ): Promise<SyncLog[]> {
    const results = await this.service.findSyncLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SyncToken], { name: "syncTokens" })
  async findSyncTokens(
    @graphql.Parent() parent: Calendar,
    @graphql.Args() args: SyncTokenFindManyArgs
  ): Promise<SyncToken[]> {
    const results = await this.service.findSyncTokens(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "account",
  })
  async getAccount(
    @graphql.Parent() parent: Calendar
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Provider, {
    nullable: true,
    name: "provider",
  })
  async getProvider(
    @graphql.Parent() parent: Calendar
  ): Promise<Provider | null> {
    const result = await this.service.getProvider(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Schedule, {
    nullable: true,
    name: "schedule",
  })
  async getSchedule(
    @graphql.Parent() parent: Calendar
  ): Promise<Schedule | null> {
    const result = await this.service.getSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
