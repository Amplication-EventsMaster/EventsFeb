/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SyncTokenService } from "../syncToken.service";
import { SyncTokenCreateInput } from "./SyncTokenCreateInput";
import { SyncToken } from "./SyncToken";
import { SyncTokenFindManyArgs } from "./SyncTokenFindManyArgs";
import { SyncTokenWhereUniqueInput } from "./SyncTokenWhereUniqueInput";
import { SyncTokenUpdateInput } from "./SyncTokenUpdateInput";

export class SyncTokenControllerBase {
  constructor(protected readonly service: SyncTokenService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SyncToken })
  async createSyncToken(
    @common.Body() data: SyncTokenCreateInput
  ): Promise<SyncToken> {
    return await this.service.createSyncToken({
      data: {
        ...data,

        calendar: data.calendar
          ? {
              connect: data.calendar,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        calendar: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SyncToken] })
  @ApiNestedQuery(SyncTokenFindManyArgs)
  async syncTokens(@common.Req() request: Request): Promise<SyncToken[]> {
    const args = plainToClass(SyncTokenFindManyArgs, request.query);
    return this.service.syncTokens({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        calendar: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SyncToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async syncToken(
    @common.Param() params: SyncTokenWhereUniqueInput
  ): Promise<SyncToken | null> {
    const result = await this.service.syncToken({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        calendar: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SyncToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSyncToken(
    @common.Param() params: SyncTokenWhereUniqueInput,
    @common.Body() data: SyncTokenUpdateInput
  ): Promise<SyncToken | null> {
    try {
      return await this.service.updateSyncToken({
        where: params,
        data: {
          ...data,

          calendar: data.calendar
            ? {
                connect: data.calendar,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          calendar: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SyncToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSyncToken(
    @common.Param() params: SyncTokenWhereUniqueInput
  ): Promise<SyncToken | null> {
    try {
      return await this.service.deleteSyncToken({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          calendar: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
