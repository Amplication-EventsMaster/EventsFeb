/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SyncToken } from "./SyncToken";
import { SyncTokenCountArgs } from "./SyncTokenCountArgs";
import { SyncTokenFindManyArgs } from "./SyncTokenFindManyArgs";
import { SyncTokenFindUniqueArgs } from "./SyncTokenFindUniqueArgs";
import { CreateSyncTokenArgs } from "./CreateSyncTokenArgs";
import { UpdateSyncTokenArgs } from "./UpdateSyncTokenArgs";
import { DeleteSyncTokenArgs } from "./DeleteSyncTokenArgs";
import { Calendar } from "../../calendar/base/Calendar";
import { SyncTokenService } from "../syncToken.service";
@graphql.Resolver(() => SyncToken)
export class SyncTokenResolverBase {
  constructor(protected readonly service: SyncTokenService) {}

  async _syncTokensMeta(
    @graphql.Args() args: SyncTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SyncToken])
  async syncTokens(
    @graphql.Args() args: SyncTokenFindManyArgs
  ): Promise<SyncToken[]> {
    return this.service.syncTokens(args);
  }

  @graphql.Query(() => SyncToken, { nullable: true })
  async syncToken(
    @graphql.Args() args: SyncTokenFindUniqueArgs
  ): Promise<SyncToken | null> {
    const result = await this.service.syncToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SyncToken)
  async createSyncToken(
    @graphql.Args() args: CreateSyncTokenArgs
  ): Promise<SyncToken> {
    return await this.service.createSyncToken({
      ...args,
      data: {
        ...args.data,

        calendar: args.data.calendar
          ? {
              connect: args.data.calendar,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SyncToken)
  async updateSyncToken(
    @graphql.Args() args: UpdateSyncTokenArgs
  ): Promise<SyncToken | null> {
    try {
      return await this.service.updateSyncToken({
        ...args,
        data: {
          ...args.data,

          calendar: args.data.calendar
            ? {
                connect: args.data.calendar,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SyncToken)
  async deleteSyncToken(
    @graphql.Args() args: DeleteSyncTokenArgs
  ): Promise<SyncToken | null> {
    try {
      return await this.service.deleteSyncToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Calendar, {
    nullable: true,
    name: "calendar",
  })
  async getCalendar(
    @graphql.Parent() parent: SyncToken
  ): Promise<Calendar | null> {
    const result = await this.service.getCalendar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
